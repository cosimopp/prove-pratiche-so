credo che l'implementazione dei semafori binari ( https://www.cs.unibo.it/~renzo/so/materiale2122/concorrenza2122-4p.pdf primo quadrante cartesiano pg 28/50) presenti race condition:
supponiamo che inizializziamo un BinSem con init_value = 1 (=> BinSem sem = new BinSem(1);), e che vengano svolte le seguenti operazioni (da tre processi diversi): V(), P() e P(). Con queste operazioni l'invariante rimane soddisfatta.
La V() viene bloccata poichè il valore del semaforo è 1; successivamente quando lanciamo la prima P(), il processo che ha chiamato la P() e il processo risvegliato possono procedere parallelamente poichè il processo risvegliato non ha più bisogno di accedere alla sezione critica.
Il problema arriva quando lanciamo la seconda P(), la quale entra nella sezione critica ma il processo che ha svolto la prima P() non è ancora uscito: race condition
scrivendo il messaggio mi sono reso conto che una possibile risposta potrebbe essere :"non tieni conto del finite progress: le due P() non rilasciano mai, ma prima o poi terminano, e quando rilasciano l'invariante non sarebbe più soddisfatta", ma così dicendo si dimostra che l'invariante durante l'esecuzione non è sempre soddisfatta!
